{"version":3,"sources":["assets/noPosterSmall.png","api.ts","components/Loading.tsx","components/Section.tsx","components/Poster.tsx","routes/Home.tsx","routes/TV.tsx","routes/Search.tsx","components/MovieDetailData.tsx","components/TVDetailData.tsx","components/NoResult.tsx","routes/Detail.tsx","components/Header.tsx","components/Router.tsx","components/GlobalStyles.tsx","components/App.tsx","index.tsx"],"names":["module","exports","API","Axios","create","baseURL","params","api_key","process","language","moviesAPI","get","id","append_to_response","term","query","encodeURIComponent","tvAPI","Container","styled","div","Loading","role","aria-label","Title","span","Grid","Section","title","children","Image","props","bgURL","Rating","ImageContainer","Year","Poster","imageURL","rating","year","isMovie","to","require","length","substring","useFetch","useState","loading","setLoading","error","setError","result","setResult","useEffect","a","nowPlaying","data","results","upcoming","popular","fetchData","Home","Helmet","map","movie","key","poster_path","original_title","vote_average","release_date","topRated","airingToday","TV","show","original_name","first_air_date","Form","form","Input","input","setResults","movieResults","tvResults","Search","defaultValue","value","setValue","onChange","event","currentTarget","useInput","termValue","setTermValue","onSubmit","preventDefault","placeholder","MovieDetailData","Data","ItemContainer","Item","Divider","runtime","genres","genre","index","name","Overview","overview","TVDetailData","episode_run_time","NoResult","Backdrop","Content","Cover","h3","p","pathname","movieId","parseInt","includes","Error","withRouter","location","history","push","match","backdrop_path","renderData","Navigation","header","List","ul","ListItem","li","current","StyledLink","Link","Router","exact","path","component","Detail","from","globalStyles","createGlobalStyle","reset","App","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fed4e37e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.87a0eb6a.png\";","import Axios, { AxiosInstance, AxiosPromise } from 'axios';\n\nconst API: AxiosInstance = Axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: process.env.REACT_APP_TMDB_KEY,\n    language: 'en-US'\n  }\n});\n\nexport interface MovieItem {\n  vote_count: number;\n  id: number;\n  video: boolean;\n  vote_average: number;\n  title: string;\n  popularity: number;\n  poster_path: string;\n  original_language: string;\n  original_title: string;\n  genre_ids: Array<number>;\n  backdrop_path: string;\n  adult: boolean;\n  overview: string;\n  release_date: string;\n}\n\ninterface MovieListData {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: MovieItem[];\n}\n\ninterface Genre {\n  id: number;\n  name: string;\n}\n\ninterface Company {\n  id: number;\n  logo_path: string | null;\n  name: string;\n  origin_country: string;\n}\n\ninterface Country {\n  iso_3166_1: string;\n  name: string;\n}\n\ninterface Language {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface MovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  budget: number;\n  genres: Genre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: Company[];\n  production_countries: Country[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: Language[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\ninterface IMoviesAPI {\n  nowPlaying: () => AxiosPromise<MovieListData>;\n  upcoming: () => AxiosPromise<MovieListData>;\n  popular: () => AxiosPromise<MovieListData>;\n  movieDetail: (id: number) => AxiosPromise<MovieDetail>;\n  search: (term: string) => AxiosPromise<MovieListData>;\n}\n\nexport const moviesAPI: IMoviesAPI = {\n  nowPlaying: () => API.get('movie/now_playing'),\n  upcoming: () => API.get('movie/upcoming'),\n  popular: () => API.get('movie/popular'),\n  movieDetail: (id: number) =>\n    API.get(`movie/${id}`, {\n      params: {\n        append_to_response: 'videos'\n      }\n    }),\n  search: (term: string) =>\n    API.get('search/movie', {\n      params: {\n        query: encodeURIComponent(term)\n      }\n    })\n};\n\nexport interface TvItem {\n  original_name: string;\n  genre_ids: Array<number>;\n  name: string;\n  popularity: number;\n  origin_country: Array<string>;\n  vote_count: number;\n  first_air_date: string;\n  backdrop_path: string;\n  original_language: string;\n  id: number;\n  vote_average: number;\n  overview: string;\n  poster_path: string;\n}\n\ninterface TvListData {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: TvItem[];\n}\n\ninterface TvProducer {\n  id: number;\n  credit_id: string;\n  name: string;\n  gender: number;\n  profile_path: string | null;\n}\n\ninterface LastEpisode {\n  air_date: string;\n  episode_number: number;\n  id: number;\n  name: string;\n  overview: string;\n  production_code: number | null;\n  season_number: number;\n  show_id: number;\n  still_path: string;\n  vote_average: number;\n  vote_count: number;\n}\n\ninterface Network {\n  name: string;\n  id: number;\n  logo_path: string;\n  origin_country: string;\n}\n\ninterface TvCompany {\n  id: number;\n  logo_path: string;\n  name: string;\n  origin_country: string;\n}\n\ninterface Season {\n  air_date: string;\n  episode_count: number;\n  id: number;\n  name: string;\n  overview: string;\n  poster_path: string | null;\n  season_number: number;\n}\n\nexport interface TvDetail {\n  backdrop_path: string;\n  created_by: TvProducer[];\n  episode_run_time: Array<number>;\n  first_air_date: string;\n  genres: Genre[];\n  homepage: string;\n  id: number;\n  in_production: boolean;\n  languages: Array<string>;\n  last_air_date: string;\n  last_episode_to_air: LastEpisode;\n  name: string;\n  next_episode_to_air: null;\n  networks: Network[];\n  number_of_episodes: number;\n  number_of_seasons: number;\n  origin_country: Array<string>;\n  original_language: string;\n  original_name: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: TvCompany[];\n  seasons: Season[];\n  status: string;\n  type: string;\n  vote_average: number;\n  vote_count: number;\n}\n\ninterface ITvAPI {\n  topRated: () => AxiosPromise<TvListData>;\n  popular: () => AxiosPromise<TvListData>;\n  airingToday: () => AxiosPromise<TvListData>;\n  showDetail: (id: number) => AxiosPromise<TvDetail>;\n  search: (string: string) => AxiosPromise<TvListData>;\n}\n\nexport const tvAPI: ITvAPI = {\n  topRated: () => API.get('tv/top_rated'),\n  popular: () => API.get('tv/popular'),\n  airingToday: () => API.get('tv/airing_today'),\n  showDetail: (id: number) =>\n    API.get(`tv/${id}`, {\n      params: {\n        append_to_response: 'videos'\n      }\n    }),\n  search: (term: string) =>\n    API.get('search/tv', {\n      params: {\n        query: encodeURIComponent(term)\n      }\n    })\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  margin-top: 20px;\n`;\n\nconst Loading = () => (\n  <Container>\n    <span role=\"img\" aria-label=\"Loading\">\n      Loading...\n    </span>\n  </Container>\n);\n\nexport default Loading;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  :not(:last-child) {\n    margin-bottom: 50px;\n  }\n`;\n\nconst Title = styled.span`\n  font-size: 14px;\n  font-weight: 600;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 125px);\n  grid-gap: 25px;\n  margin-top: 25px;\n`;\n\ninterface IProps {\n  title: string;\n}\n\nconst Section: React.FC<IProps> = ({ title, children }) => (\n  <Container>\n    <Title>{title}</Title>\n    <Grid>{children}</Grid>\n  </Container>\n);\n\nexport default Section;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  font-size: 12px;\n`;\n\nconst Image = styled.div<{ bgURL: string }>`\n  background-image: url(${props => props.bgURL});\n  height: 180px;\n  background-size: cover;\n  border-radius: 4px;\n  background-position: center center;\n  transition: opacity 0.1s linear;\n`;\n\nconst Rating = styled.span`\n  bottom: 5px;\n  right: 5px;\n  position: absolute;\n  opacity: 0;\n  transition: opacity 0.1s linear;\n`;\n\nconst ImageContainer = styled.div`\n  margin-bottom: 5px;\n  position: relative;\n  &:hover {\n    ${Image} {\n      opacity: 0.3;\n    }\n    ${Rating} {\n      opacity: 1;\n    }\n  }\n`;\n\nconst Title = styled.span`\n  display: block;\n  margin-bottom: 3px;\n`;\n\nconst Year = styled.span`\n  font-size: 10px;\n  color: rgba(255, 255, 255, 0.5);\n`;\n\ninterface IProps {\n  id: number;\n  imageURL: string;\n  title: string;\n  rating: number;\n  year: string;\n  isMovie?: boolean;\n}\n\nconst Poster: React.FC<IProps> = ({\n  id,\n  imageURL,\n  title,\n  rating,\n  year,\n  isMovie = false\n}) => (\n  <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\n    <Container>\n      <ImageContainer>\n        <Image\n          bgURL={\n            imageURL\n              ? `https://image.tmdb.org/t/p/w300${imageURL}`\n              : require('assets/noPosterSmall.png')\n          }\n        />\n        <Rating>\n          <span role=\"img\" aria-label=\"rating\">\n            ★\n          </span>{' '}\n          {rating}/10\n        </Rating>\n      </ImageContainer>\n      <Title>\n        {title.length > 18 ? `${title.substring(0, 18)}...` : title}\n      </Title>\n      <Year>{year}</Year>\n    </Container>\n  </Link>\n);\n\nexport default Poster;\n","import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { moviesAPI, MovieItem } from 'api';\nimport Loading from 'components/Loading';\nimport Section from 'components/Section';\nimport Poster from 'components/Poster';\n\nconst Container = styled.div`\n  padding: 20px;\n`;\n\nconst useFetch = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<ErrorEvent | null>(null);\n  const [result, setResult] = useState<{\n    nowPlaying: MovieItem[] | null;\n    upcoming: MovieItem[] | null;\n    popular: MovieItem[] | null;\n  } | null>(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const {\n          data: { results: nowPlaying }\n        } = await moviesAPI.nowPlaying();\n        const {\n          data: { results: upcoming }\n        } = await moviesAPI.upcoming();\n        const {\n          data: { results: popular }\n        } = await moviesAPI.popular();\n        setResult({\n          nowPlaying,\n          upcoming,\n          popular\n        });\n      } catch (e) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return { loading, result, error };\n};\n\nconst Home: React.FC = () => {\n  const { loading, result } = useFetch();\n  return (\n    <>\n      <Helmet title=\"Movies | Nomflix\" />\n      {loading ? (\n        <Loading />\n      ) : (\n        <Container>\n          {result && result.nowPlaying && result.nowPlaying.length > 0 && (\n            <Section title=\"Now Playing\">\n              {result.nowPlaying.map(movie => (\n                <Poster\n                  key={movie.id}\n                  id={movie.id}\n                  imageURL={movie.poster_path}\n                  title={movie.original_title}\n                  rating={movie.vote_average}\n                  year={movie.release_date.substring(0, 4)}\n                  isMovie={true}\n                />\n              ))}\n            </Section>\n          )}\n          {result && result.upcoming && result.upcoming.length > 0 && (\n            <Section title=\"Upcoming\">\n              {result.upcoming.map(movie => (\n                <Poster\n                  key={movie.id}\n                  id={movie.id}\n                  imageURL={movie.poster_path}\n                  title={movie.original_title}\n                  rating={movie.vote_average}\n                  year={movie.release_date.substring(0, 4)}\n                  isMovie={true}\n                />\n              ))}\n            </Section>\n          )}\n          {result && result.popular && result.popular.length > 0 && (\n            <Section title=\"Popular\">\n              {result.popular.map(movie => (\n                <Poster\n                  key={movie.id}\n                  id={movie.id}\n                  imageURL={movie.poster_path}\n                  title={movie.original_title}\n                  rating={movie.vote_average}\n                  year={movie.release_date.substring(0, 4)}\n                  isMovie={true}\n                />\n              ))}\n            </Section>\n          )}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { TvItem, tvAPI } from 'api';\nimport Loading from 'components/Loading';\nimport Section from 'components/Section';\nimport Poster from 'components/Poster';\n\nconst Container = styled.div`\n  padding: 20px;\n`;\n\nconst useFetch = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<ErrorEvent | null>(null);\n  const [result, setResult] = useState<{\n    topRated: TvItem[] | null;\n    popular: TvItem[] | null;\n    airingToday: TvItem[] | null;\n  } | null>(null);\n  const fetchData = async () => {\n    try {\n      const {\n        data: { results: topRated }\n      } = await tvAPI.topRated();\n      const {\n        data: { results: popular }\n      } = await tvAPI.popular();\n      const {\n        data: { results: airingToday }\n      } = await tvAPI.airingToday();\n      setResult({\n        topRated,\n        popular,\n        airingToday\n      });\n    } catch (e) {\n      setError(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return { loading, result, error };\n};\n\nconst TV: React.FC = () => {\n  const { loading, result } = useFetch();\n  return (\n    <>\n      <Helmet title=\"TV Shows | Nomflix\" />\n      {loading ? (\n        <Loading />\n      ) : (\n        <Container>\n          {result && result.topRated && result.topRated.length > 0 && (\n            <Section title=\"Top Rated\">\n              {result.topRated.map(show => (\n                <Poster\n                  key={show.id}\n                  id={show.id}\n                  imageURL={show.poster_path}\n                  title={show.original_name}\n                  rating={show.vote_average}\n                  year={show.first_air_date.substring(0, 4)}\n                />\n              ))}\n            </Section>\n          )}\n          {result && result.popular && result.popular.length > 0 && (\n            <Section title=\"Popular\">\n              {result.popular.map(show => (\n                <Poster\n                  key={show.id}\n                  id={show.id}\n                  imageURL={show.poster_path}\n                  title={show.original_name}\n                  rating={show.vote_average}\n                  year={show.first_air_date.substring(0, 4)}\n                />\n              ))}\n            </Section>\n          )}\n          {result && result.airingToday && result.airingToday.length > 0 && (\n            <Section title=\"Airing Today\">\n              {result.airingToday.map(show => (\n                <Poster\n                  key={show.id}\n                  id={show.id}\n                  imageURL={show.poster_path}\n                  title={show.original_name}\n                  rating={show.vote_average}\n                  year={show.first_air_date.substring(0, 4)}\n                />\n              ))}\n            </Section>\n          )}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default TV;\n","import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { MovieItem, TvItem, moviesAPI, tvAPI } from 'api';\nimport Loading from 'components/Loading';\nimport Section from 'components/Section';\nimport Poster from 'components/Poster';\n\nconst Container = styled.div`\n  padding: 20px;\n`;\n\nconst Form = styled.form`\n  margin-bottom: 50px;\n  width: 100%;\n`;\n\nconst Input = styled.input`\n  all: unset;\n  font-size: 28px;\n  width: 100%;\n`;\n\nconst useInput = (defaultValue: string) => {\n  const [value, setValue] = useState(defaultValue);\n\n  const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const {\n      currentTarget: { value }\n    } = event;\n    setValue(value);\n  };\n\n  return { value, onChange };\n};\n\nconst useFetch = (term: string) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<ErrorEvent | null>(null);\n  const [results, setResults] = useState<{\n    movieResults: MovieItem[] | null;\n    tvResults: TvItem[] | null;\n  } | null>(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (term.length === 0) return;\n        setLoading(true);\n        const {\n          data: { results: movieResults }\n        } = await moviesAPI.search(term);\n        const {\n          data: { results: tvResults }\n        } = await tvAPI.search(term);\n        setResults({\n          movieResults,\n          tvResults\n        });\n      } catch (e) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [term]);\n\n  return { loading, results, error };\n};\n\nconst Search: React.FC = () => {\n  const term = useInput('');\n  const [termValue, setTermValue] = useState('');\n  const { loading, results } = useFetch(termValue);\n  return (\n    <Container>\n      <Helmet title=\"Search | Nomflix\" />\n      <Form\n        onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\n          event.preventDefault();\n          setTermValue(term.value);\n        }}\n      >\n        <Input {...term} placeholder=\"Search Movies or TV Shows...\" />\n      </Form>\n      {loading ? (\n        <Loading />\n      ) : (\n        <>\n          {results && results.movieResults && results.movieResults.length > 0 && (\n            <Section title=\"Movie Results\">\n              {results.movieResults.map(movie => (\n                <Poster\n                  key={movie.id}\n                  id={movie.id}\n                  imageURL={movie.poster_path}\n                  title={movie.original_title}\n                  rating={movie.vote_average}\n                  year={movie.release_date.substring(0, 4)}\n                  isMovie={true}\n                />\n              ))}\n            </Section>\n          )}\n          {results && results.tvResults && results.tvResults.length > 0 && (\n            <Section title=\"TV Show Results\">\n              {results.tvResults.map(show => (\n                <Poster\n                  key={show.id}\n                  id={show.id}\n                  imageURL={show.poster_path}\n                  title={show.original_name}\n                  rating={show.vote_average}\n                  year={show.first_air_date.substring(0, 4)}\n                />\n              ))}\n            </Section>\n          )}\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { MovieDetail } from 'api';\nimport {\n  Data,\n  ItemContainer,\n  Title,\n  Item,\n  Divider,\n  Overview\n} from 'routes/Detail';\n\ninterface IProps {\n  result: MovieDetail;\n}\n\nconst MovieDetailData: React.FC<IProps> = ({ result }) => (\n  <Data>\n    <Helmet title={`${result.original_title} | Nomflix`} />\n    <Title>{result.original_title}</Title>\n    <ItemContainer>\n      <Item>{result.release_date.substring(0, 4)}</Item>\n      <Divider>•</Divider>\n      <Item>{result.runtime} min</Item>\n      <Divider>•</Divider>\n      <Item>\n        {result.genres &&\n          result.genres.map((genre, index) =>\n            index === result.genres.length - 1 ? genre.name : `${genre.name} / `\n          )}\n      </Item>\n    </ItemContainer>\n    <Overview>{result.overview}</Overview>\n  </Data>\n);\n\nexport default MovieDetailData;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { TvDetail } from 'api';\nimport {\n  Data,\n  ItemContainer,\n  Title,\n  Item,\n  Divider,\n  Overview\n} from 'routes/Detail';\n\ninterface IProps {\n  result: TvDetail;\n}\n\nconst TVDetailData: React.FC<IProps> = ({ result }) => (\n  <Data>\n    <Helmet title={`${result.original_name} | Nomflix`} />\n    <Title>{result.original_name}</Title>\n    <ItemContainer>\n      <Item>{result.first_air_date.substring(0, 4)}</Item>\n      <Divider>•</Divider>\n      <Item>{result.episode_run_time[0]} min</Item>\n      <Divider>•</Divider>\n      <Item>\n        {result.genres &&\n          result.genres.map((genre, index) =>\n            index === result.genres.length - 1 ? genre.name : `${genre.name} / `\n          )}\n      </Item>\n    </ItemContainer>\n    <Overview>{result.overview}</Overview>\n  </Data>\n);\n\nexport default TVDetailData;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Data, Title } from 'routes/Detail';\n\nconst NoResult: React.FC = () => (\n  <Data>\n    <Helmet title=\"No result | Nomflix\" />\n    <Title>No result</Title>\n  </Data>\n);\n\nexport default NoResult;\n","import React, { useState, useEffect } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { moviesAPI, tvAPI, MovieDetail, TvDetail } from 'api';\nimport Loading from 'components/Loading';\nimport MovieDetailData from 'components/MovieDetailData';\nimport TVDetailData from 'components/TVDetailData';\nimport NoResult from 'components/NoResult';\n\nconst Container = styled.div`\n  height: calc(100vh - 50px);\n  width: 100%;\n  position: relative;\n  padding: 50px;\n`;\n\nconst Backdrop = styled.div<{ bgURL: string }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url(${props => props.bgURL});\n  background-position: center center;\n  background-size: cover;\n  filter: blur(3px);\n  opacity: 0.5;\n  z-index: 0;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  width: 100%;\n  position: relative;\n  z-index: 1;\n  height: 100%;\n`;\n\nconst Cover = styled.div<{ bgURL: string }>`\n  width: 30%;\n  background-image: url(${props => props.bgURL});\n  background-position: center center;\n  background-size: cover;\n  height: 100%;\n  border-radius: 5px;\n`;\n\nexport const Data = styled.div`\n  width: 70%;\n  margin-left: 40px;\n`;\n\nexport const Title = styled.h3`\n  font-size: 32px;\n`;\n\nexport const ItemContainer = styled.div`\n  margin: 20px 0;\n`;\n\nexport const Item = styled.span``;\n\nexport const Divider = styled.span`\n  margin: 0 10px;\n`;\n\nexport const Overview = styled.p`\n  font-size: 14px;\n  opacity: 0.7;\n  line-height: 1.5;\n  width: 50%;\n`;\n\nconst useFetch = (pathname: string, id: string | undefined) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<ErrorEvent | null>(null);\n  const [result, setResult] = useState<MovieDetail | TvDetail | null>(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (id) {\n          const movieId = parseInt(id);\n          if (pathname.includes('/movie/')) {\n            const { data } = await moviesAPI.movieDetail(movieId);\n            setResult(data);\n          } else {\n            const { data } = await tvAPI.showDetail(movieId);\n            setResult(data);\n          }\n        } else {\n          throw Error('Id is undefined.');\n        }\n      } catch (e) {\n        setError(e);\n        setResult(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [pathname, id]);\n\n  return { loading, result, error };\n};\n\nconst renderData = (result: MovieDetail | TvDetail) => {\n  if ('original_title' in result) {\n    return <MovieDetailData result={result} />;\n  } else if ('original_name' in result) {\n    return <TVDetailData result={result} />;\n  }\n  return null;\n};\n\nconst Detail: React.FC<RouteComponentProps<{ id: string | undefined }>> = ({\n  location: { pathname },\n  history: { push },\n  match: { params }\n}) => {\n  const { loading, result } = useFetch(pathname, params.id);\n  return (\n    <>\n      {loading ? (\n        <>\n          <Helmet title=\"Loading | Nomflix\" />\n          <Loading />\n        </>\n      ) : (\n        <Container>\n          {result ? (\n            <>\n              <Backdrop\n                bgURL={`https://image.tmdb.org/t/p/original${\n                  result.backdrop_path\n                }`}\n              />\n              <Content>\n                <Cover\n                  bgURL={\n                    result.poster_path\n                      ? `https://image.tmdb.org/t/p/original${\n                          result.poster_path\n                        }`\n                      : require('assets/noPosterSmall.png')\n                  }\n                />\n                {renderData(result)}\n              </Content>\n            </>\n          ) : (\n            <Content>\n              <NoResult />\n            </Content>\n          )}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default withRouter(Detail);\n","import React from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Navigation = styled.header`\n  color: #fff;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  background-color: rgba(20, 20, 20, 0.8);\n  z-index: 10;\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\n\nconst List = styled.ul`\n  display: flex;\n`;\n\nconst ListItem = styled.li<{ current: boolean }>`\n  width: 80px;\n  height: 50px;\n  text-align: center;\n  border-bottom: 3px solid\n    ${props => (props.current ? '#3498db' : 'transparent')};\n  transition: border-bottom 0.5s ease-in-out;\n`;\n\nconst StyledLink = styled(Link)`\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Header: React.FC<RouteComponentProps> = ({ location: { pathname } }) => (\n  <Navigation>\n    <List>\n      <ListItem current={pathname === '/'}>\n        <StyledLink to=\"/\">Movies</StyledLink>\n      </ListItem>\n      <ListItem current={pathname === '/tv'}>\n        <StyledLink to=\"/tv\">TV</StyledLink>\n      </ListItem>\n      <ListItem current={pathname === '/search'}>\n        <StyledLink to=\"/search\">Search</StyledLink>\n      </ListItem>\n    </List>\n  </Navigation>\n);\n\nexport default withRouter(Header);\n","import React from 'react';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Home from 'routes/Home';\nimport TV from 'routes/TV';\nimport Search from 'routes/Search';\nimport Detail from 'routes/Detail';\nimport Header from './Header';\n\nconst Router: React.FC = () => (\n  <HashRouter>\n    <>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/tv\" component={TV} />\n        <Route path=\"/search\" component={Search} />\n        <Route path=\"/movie/:id\" component={Detail} />\n        <Route path=\"/show/:id\" component={Detail} />\n        <Redirect from=\"*\" to=\"/\" />\n      </Switch>\n    </>\n  </HashRouter>\n);\n\nexport default Router;\n","import {\n  createGlobalStyle,\n  GlobalStyleComponent,\n  DefaultTheme\n} from 'styled-components';\nimport reset from 'styled-reset';\n\nconst globalStyles: GlobalStyleComponent<{}, DefaultTheme> = createGlobalStyle`\n  ${reset};\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-size: 12px;\n    background-color: rgba(20, 20, 20, 1);\n    color: white;\n    padding-top: 50px;\n  }\n`;\n\nexport default globalStyles;\n","import React from 'react';\nimport Router from './Router';\nimport GlobalStyles from './GlobalStyles';\n\nconst App: React.FC = () => (\n  <>\n    <GlobalStyles />\n    <Router />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}